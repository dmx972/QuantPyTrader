version: '3.8'

services:
  # Main QuantPyTrader Application
  quantpytrader:
    build: .
    container_name: quantpytrader_app
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantpytrader.db
      - PYTHONPATH=/app
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Streamlit Dashboard
  dashboard:
    build: .
    container_name: quantpytrader_dashboard
    ports:
      - "8501:8501"
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantpytrader.db
    command: ["streamlit", "run", "app.py", "--server.port=8501", "--server.address=0.0.0.0"]
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - quantpytrader
      - redis
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Redis for caching and message queue
  redis:
    image: redis:7.2-alpine
    container_name: quantpytrader_redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Celery Worker for background tasks
  celery_worker:
    build: .
    container_name: quantpytrader_worker
    command: ["celery", "-A", "core.tasks", "worker", "--loglevel=info"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantpytrader.db
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Celery Beat for scheduled tasks
  celery_beat:
    build: .
    container_name: quantpytrader_scheduler
    command: ["celery", "-A", "core.tasks", "beat", "--loglevel=info"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantpytrader.db
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Flower for Celery monitoring
  flower:
    build: .
    container_name: quantpytrader_flower
    command: ["celery", "-A", "core.tasks", "flower"]
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: quantpytrader_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: quantpytrader_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - quantpytrader_network

  # Jupyter Lab for research and development
  jupyter:
    build: .
    container_name: quantpytrader_jupyter
    ports:
      - "8888:8888"
    command: ["jupyter", "lab", "--ip=0.0.0.0", "--port=8888", "--no-browser", "--allow-root", "--token=quantpytrader"]
    environment:
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=sqlite:///./quantpytrader.db
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./core:/app/core
    restart: unless-stopped
    networks:
      - quantpytrader_network

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  quantpytrader_network:
    driver: bridge